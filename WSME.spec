#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : WSME
Version  : 0.9.3
Release  : 39
URL      : http://pypi.debian.net/WSME/WSME-0.9.3.tar.gz
Source0  : http://pypi.debian.net/WSME/WSME-0.9.3.tar.gz
Summary  : Simplify the writing of REST APIs, and extend them with additional protocols.
Group    : Development/Tools
License  : MIT
Requires: WSME-license = %{version}-%{release}
Requires: WSME-python = %{version}-%{release}
Requires: WSME-python3 = %{version}-%{release}
Requires: Pygments
Requires: WSME
Requires: WebOb
Requires: netaddr
Requires: pecan
Requires: pytz
Requires: simplegeneric
Requires: six
BuildRequires : Babel
BuildRequires : Flask
BuildRequires : Pygments
BuildRequires : Sphinx-python
BuildRequires : WSME
BuildRequires : WebOb
BuildRequires : WebOb-python
BuildRequires : buildreq-distutils3
BuildRequires : docutils-python
BuildRequires : flask-python
BuildRequires : itsdangerous-python
BuildRequires : jinja2-python
BuildRequires : markupsafe-python
BuildRequires : netaddr
BuildRequires : nose
BuildRequires : pbr
BuildRequires : pecan
BuildRequires : pytz
BuildRequires : pytz-python
BuildRequires : simplegeneric
BuildRequires : simplegeneric-python
BuildRequires : six
BuildRequires : six-python
BuildRequires : sqlalchemy-python
BuildRequires : webtest-python
BuildRequires : werkzeug-python

%description
Web Services Made Easy
======================

Introduction
------------

Web Services Made Easy (WSME) simplifies the writing of REST web services
by providing simple yet powerful typing, removing the need to directly
manipulate the request and the response objects.

WSME can work standalone or on top of your favorite Python web
(micro)framework, so you can use both your preferred way of routing your REST
requests and most of the features of WSME that rely on the typing system like:

-   Alternate protocols, including those supporting batch-calls
-   Easy documentation through a Sphinx_ extension

WSME is originally a rewrite of TGWebServices
with a focus on extensibility, framework-independance and better type handling.

How Easy ?
~~~~~~~~~~

Here is a standalone wsgi example::

    from wsme import WSRoot, expose

    class MyService(WSRoot):
        @expose(unicode, unicode)  # First parameter is the return type,
                                   # then the function argument types
        def hello(self, who=u'World'):
            return u"Hello {0} !".format(who)

    ws = MyService(protocols=['restjson', 'restxml', 'soap'])
    application = ws.wsgiapp()

With this published at the ``/ws`` path of your application, you can access
your hello function in various protocols:

.. list-table::
    :header-rows: 1

    * - URL
      - Returns

    * - ``http://<server>/ws/hello.json?who=you``
      - ``"Hello you !"``

    * - ``http://<server>/ws/hello.xml``
      - ``<result>Hello World !</result>``

    * - ``http://<server>/ws/api.wsdl``
      - A WSDL description for any SOAP client.


Main features
~~~~~~~~~~~~~

-   Very simple API.
-   Supports user-defined simple and complex types.
-   Multi-protocol : REST+Json, REST+XML, SOAP, ExtDirect and more to come.
-   Extensible : easy to add more protocols or more base types.
-   Framework independence : adapters are provided to easily integrate
    your API in any web framework, for example a wsgi container,
    Pecan_, TurboGears_, Flask_, cornice_...
-   Very few runtime dependencies: webob, simplegeneric. Optionnaly lxml and
    simplejson if you need better performances.
-   Integration in `Sphinx`_ for making clean documentation with
    ``wsmeext.sphinxext``.

.. _Pecan: http://pecanpy.org/
.. _TurboGears: http://www.turbogears.org/
.. _Flask: http://flask.pocoo.org/
.. _cornice: http://pypi.python.org/pypi/cornice

Install
~~~~~~~

::

    pip install WSME

or, if you do not have pip on your system or virtualenv

::

    easy_install WSME

Changes
~~~~~~~

-   Read the `Changelog`_

Getting Help
~~~~~~~~~~~~

-   Read the `WSME Documentation`_.
-   Questions about WSME should go to the `python-wsme mailinglist`_.

Contribute
~~~~~~~~~~

* Documentation: http://packages.python.org/WSME/
* Source: http://git.openstack.org/cgit/openstack/wsme
* Bugs: https://bugs.launchpad.net/wsme/+bugs
* Code review: https://review.openstack.org/#/q/project:openstack/wsme,n,z

.. _Changelog: http://packages.python.org/WSME/changes.html
.. _python-wsme mailinglist: http://groups.google.com/group/python-wsme
.. _WSME Documentation: http://packages.python.org/WSME/
.. _WSME issue tracker: https://bugs.launchpad.net/wsme/+bugs
.. _Sphinx: http://sphinx.pocoo.org/

%package license
Summary: license components for the WSME package.
Group: Default

%description license
license components for the WSME package.


%package python
Summary: python components for the WSME package.
Group: Default
Requires: WSME-python3 = %{version}-%{release}
Provides: wsme-python

%description python
python components for the WSME package.


%package python3
Summary: python3 components for the WSME package.
Group: Default
Requires: python3-core
Provides: pypi(WSME)

%description python3
python3 components for the WSME package.


%prep
%setup -q -n WSME-0.9.3
cd %{_builddir}/WSME-0.9.3

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1582902049
# -Werror is for werrorists
export GCC_IGNORE_WERROR=1
export CFLAGS="$CFLAGS -fno-lto "
export FCFLAGS="$CFLAGS -fno-lto "
export FFLAGS="$CFLAGS -fno-lto "
export CXXFLAGS="$CXXFLAGS -fno-lto "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

%check
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
python -m nose || :
%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
mkdir -p %{buildroot}/usr/share/package-licenses/WSME
cp %{_builddir}/WSME-0.9.3/LICENSE %{buildroot}/usr/share/package-licenses/WSME/6f86c7f33294f02ab56862165f378421999f1840
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----

%files
%defattr(-,root,root,-)

%files license
%defattr(0644,root,root,0755)
/usr/share/package-licenses/WSME/6f86c7f33294f02ab56862165f378421999f1840

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
